"use client";
import React, { useState, useMemo, useEffect, useCallback } from "react";
import { Search, Car, Users, Clock, Layers, ParkingCircle, Building, Menu, X, RefreshCw } from "lucide-react";

import { Vehicle, ParkingSpace, BuildingEntrance } from "./types";

import { mockVehicles, mockParkingLots } from "./data/mockData";

import { calculatePath } from "./utils/pathCalculator";

import { getLatestResult } from "./utils/apiClient";
import { convertImageUrl } from "./utils/apiClient";

import StatsCard from "./components/StatsCard";

import ParkingLotSelector from "./components/ParkingLotSelector";

import FloorSelector from "./components/FloorSelector";

import SearchBar from "./components/SearchBar";

import VehicleInfo from "./components/VehicleInfo";

import EntranceSelectionModal from "./components/EntranceSelectionModal";

import ParkingMap from "./components/ParkingMap";

import CameraModal from "./components/CameraModal";

import RealTimeUpdate from "./components/RealTimeUpdate";

// --- Î©îÏù∏ ÌéòÏù¥ÏßÄ Ïª¥Ìè¨ÎÑåÌä∏ ---
export default function SmartParkingSystem() {
  const [parkingLots, setParkingLots] = useState(mockParkingLots);
  const [selectedLotId, setSelectedLotId] = useState<string>(parkingLots[0].id);
  const [selectedFloorId, setSelectedFloorId] = useState<string>(parkingLots[0].floors[0].id);
  const [searchResult, setSearchResult] = useState<{ vehicle: Vehicle; space: ParkingSpace } | null>(null);
  const [highlightedVehicleId, setHighlightedVehicleId] = useState<string | null>(null);
  const [searchMessage, setSearchMessage] = useState<string>("");
  const [cameraModalUrl, setCameraModalUrl] = useState<string | null>(null);
  const [cameraVehiclePlate, setCameraVehiclePlate] = useState<string>("");
  const [showEntranceModal, setShowEntranceModal] = useState<boolean>(false);
  const [navigationPath, setNavigationPath] = useState<{ x: number; y: number }[] | null>(null);
  const [animationProgress, setAnimationProgress] = useState<number>(0);
  const [sidebarOpen, setSidebarOpen] = useState<boolean>(false);
  
  // API Í¥ÄÎ†® state
  const [realTimeActive, setRealTimeActive] = useState<boolean>(false);
  const [vehicles, setVehicles] = useState<Vehicle[]>(mockVehicles);
  const [isSearching, setIsSearching] = useState<boolean>(false);

  const selectedLot = useMemo(() => parkingLots.find((lot) => lot.id === selectedLotId)!, [selectedLotId, parkingLots]);
  const selectedFloor = useMemo(
    () => selectedLot.floors.find((floor) => floor.id === selectedFloorId),
    [selectedLot, selectedFloorId]
  );

  // Ïï†ÎãàÎ©îÏù¥ÏÖò Ìö®Í≥º - Î©îÎ™®Ïù¥Ï†úÏù¥ÏÖòÏùÑ ÌÜµÌïú ÏÑ±Îä• ÏµúÏ†ÅÌôî
  const startAnimation = useCallback(() => {
    if (navigationPath) {
      const interval = setInterval(() => {
        setAnimationProgress((prev) => {
          const next = prev + 0.02;
          return next >= 1 ? 0 : next;
        });
      }, 50);
      return () => clearInterval(interval);
    }
  }, [navigationPath]);

  useEffect(() => {
    const cleanup = startAnimation();
    return cleanup;
  }, [startAnimation]);

  const handleLotChange = useCallback((lotId: string) => {
    const newLot = parkingLots.find((lot) => lot.id === lotId)!;
    setSelectedLotId(lotId);
    setSelectedFloorId(newLot.floors[0].id);
    setSearchResult(null);
    setHighlightedVehicleId(null);
    setSearchMessage("");
    setNavigationPath(null);
  }, [parkingLots]);

  const lotStats = useMemo(() => {
    let totalSpots = 0;
    let occupiedSpots = 0;
    selectedLot.floors.forEach((floor) => {
      totalSpots += floor.mapData.spaces.length;
      occupiedSpots += floor.mapData.spaces.filter((s) => s.status === "occupied").length;
    });
    return { totalSpots, occupiedSpots, floorCount: selectedLot.floors.length };
  }, [selectedLot]); // ÏõêÎûòÎåÄÎ°ú Î≥µÏõê

  const handleSearch = useCallback(
    async (query: string) => {
      console.log(`üîç Í≤ÄÏÉâ ÏãúÏûë: "${query}"`);
      
      // Î®ºÏ†Ä Í∏∞Ï°¥ Î°úÏª¨ Îç∞Ïù¥ÌÑ∞ÏóêÏÑú Í≤ÄÏÉâ
      let found = false;
      for (const lot of parkingLots) {
        for (const floor of lot.floors) {
          for (const space of floor.mapData.spaces) {
            const vehicle = vehicles.find((v) => v.id === space.vehicleId);
            if (vehicle && vehicle.licensePlate.includes(query)) {
              console.log(`‚úÖ Î°úÏª¨ÏóêÏÑú Ï∞®Îüâ Î∞úÍ≤¨: ${vehicle.licensePlate}`);
              if (selectedLotId !== lot.id) {
                handleLotChange(lot.id);
              }
              setSelectedFloorId(floor.id);
              setSearchResult({ vehicle, space });
              setHighlightedVehicleId(vehicle.id);
              setSearchMessage("");
              setNavigationPath(null);
              found = true;
              break;
            }
          }
          if (found) break;
        }
        if (found) break;
      }

      // Î°úÏª¨ Îç∞Ïù¥ÌÑ∞ÏóêÏÑú Ï∞æÏßÄ Î™ªÌïú Í≤ΩÏö∞, API Ìò∏Ï∂ú
      if (!found && query.trim()) {
        console.log(`üåê Î°úÏª¨ÏóêÏÑú Ï∞æÏßÄ Î™ªÌï®. API Ìò∏Ï∂ú ÏãúÏûë...`);
        try {
          setIsSearching(true);
          setSearchMessage("ESP32-CAM APIÏóêÏÑú Ï∞®Îüâ Ï†ïÎ≥¥Î•º Í≤ÄÏÉâ Ï§ë...");
          
          // Î™®Îì† Ï∞®ÎüâÎ≤àÌò∏Ïóê ÎåÄÌï¥ Ïã§Ï†ú ESP32-CAM API Ìò∏Ï∂ú
          const response = await getLatestResult();
          console.log(`üì° API ÏùëÎãµ:`, response);
          
          if (response.success && response.data) {
            console.log(`‚úÖ API ÏÑ±Í≥µ! ÏúÑÏπò: ${response.data.ocr_text}`);
            
            // Ïù¥ÎØ∏ÏßÄ URL Î≥ÄÌôò
            let validImageUrl = undefined;
            if (response.data.photo_url) {
              validImageUrl = convertImageUrl(response.data.photo_url);
              console.log('Î≥ÄÌôòÎêú Ïù¥ÎØ∏ÏßÄ URL:', validImageUrl);
            }
            
            // APIÏóêÏÑú Î∞õÏùÄ Îç∞Ïù¥ÌÑ∞Î°ú ÏÉàÎ°úÏö¥ Vehicle ÏÉùÏÑ±
            const apiVehicle: Vehicle = {
              id: `api_${Date.now()}`,
              licensePlate: query, // ÏûÖÎ†•Îêú Ï∞®ÎüâÎ≤àÌò∏ Í∑∏ÎåÄÎ°ú ÏÇ¨Ïö©
              timestamp: new Date(response.data.created_at || new Date()),
              imageUrl: validImageUrl,
              confidence: response.data.confidence,
              isFromAPI: true,
            };

            // API Ï∞®ÎüâÏùÑ vehicles Î∞∞Ïó¥Ïóê Ï∂îÍ∞Ä (Ï§ëÎ≥µ Î∞©ÏßÄ)
            setVehicles(prev => {
              const exists = prev.find(v => v.licensePlate === apiVehicle.licensePlate);
              if (!exists) {
                return [...prev, apiVehicle];
              }
              return prev;
            });

            // APIÏóêÏÑú Î∞õÏùÄ Ïã§Ï†ú ÏúÑÏπò Ï†ïÎ≥¥Î°ú Ï£ºÏ∞®Í≥µÍ∞Ñ Î∞∞Ïπò
            const firstLot = parkingLots[0];
            const firstFloor = firstLot.floors[0];
            
            let targetSpace;
            
            // APIÏóêÏÑú Î∞õÏùÄ ÏúÑÏπò Ï†ïÎ≥¥Î°ú Ï£ºÏ∞®Í≥µÍ∞Ñ Îß§Ìïë
            const apiLocation = response.data.ocr_text.toUpperCase();
            console.log(`üéØ APIÏóêÏÑú Î∞õÏùÄ ÏúÑÏπò: ${response.data.ocr_text} -> ${apiLocation}`);
            
            // Ìï¥Îãπ ÏúÑÏπòÏùò Ï£ºÏ∞®Í≥µÍ∞Ñ Ï∞æÍ∏∞ (Îπà Í≥µÍ∞ÑÎßå)
            targetSpace = firstFloor.mapData.spaces.find(space => 
              space.spaceNumber === apiLocation && space.status === "empty"
            );
            
            console.log(`üÖøÔ∏è Îß§ÌïëÎêú Ï£ºÏ∞®Í≥µÍ∞Ñ:`, targetSpace ? `${targetSpace.spaceNumber} (${targetSpace.status})` : 'ÏóÜÏùå');
            
            // API ÏúÑÏπòÎ•º Ï∞æÏßÄ Î™ªÌïú Í≤ΩÏö∞ Ï≤òÎ¶¨
            if (!targetSpace) {
              const occupiedSpace = firstFloor.mapData.spaces.find(space => 
                space.spaceNumber === apiLocation
              );
              if (occupiedSpace && occupiedSpace.status === "occupied") {
                console.warn(`‚ö†Ô∏è ${apiLocation} Í≥µÍ∞ÑÏù¥ Ïù¥ÎØ∏ Ï†êÏú†Îê®. ÎåÄÏ≤¥ Í≥µÍ∞Ñ Ï∞æÎäî Ï§ë...`);
                targetSpace = firstFloor.mapData.spaces.find(space => space.status === "empty");
              } else {
                console.warn(`‚ùå ${apiLocation} Í≥µÍ∞ÑÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏùå. ÎåÄÏ≤¥ Í≥µÍ∞Ñ Ï∞æÎäî Ï§ë...`);
                targetSpace = firstFloor.mapData.spaces.find(space => space.status === "empty");
              }
            }
            
            if (targetSpace) {
              console.log(`‚úÖ Ï∞®Îüâ Î∞∞Ïπò ÏôÑÎ£å: ${query} -> ${targetSpace.spaceNumber}`);
              
              // parkingLots ÏÉÅÌÉúÎ•º ÏóÖÎç∞Ïù¥Ìä∏ÌïòÏó¨ Ï£ºÏ∞®Í≥µÍ∞ÑÏóê Ï∞®Îüâ Î∞∞Ïπò
              setParkingLots(prevLots => {
                const newLots = prevLots.map(lot => {
                  if (lot.id === firstLot.id) {
                    return {
                      ...lot,
                      floors: lot.floors.map(floor => {
                        if (floor.id === firstFloor.id) {
                          return {
                            ...floor,
                            mapData: {
                              ...floor.mapData,
                              spaces: floor.mapData.spaces.map(space => {
                                if (space.id === targetSpace!.id) {
                                  return {
                                    ...space,
                                    status: "occupied" as const,
                                    vehicleId: apiVehicle.id
                                  };
                                }
                                return space;
                              })
                            }
                          };
                        }
                        return floor;
                      })
                    };
                  }
                  return lot;
                });
                return newLots;
              });
              
              setSelectedLotId(firstLot.id);
              setSelectedFloorId(firstFloor.id);
              setSearchResult({ vehicle: apiVehicle, space: targetSpace });
              setHighlightedVehicleId(apiVehicle.id);
              setSearchMessage(""); // ÏÑ±Í≥µ Ïãú Î©îÏãúÏßÄ ÏßÄÏö∞Í∏∞
              setNavigationPath(null);
              found = true; // üî• API ÏÑ±Í≥µ Ïãú found = true ÏÑ§Ï†ï
              console.log(`üéâ Í≤ÄÏÉâ ÏÑ±Í≥µ! found = ${found}`);
            } else {
              console.error(`‚ùå Î∞∞ÏπòÌï† Ï£ºÏ∞®Í≥µÍ∞ÑÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏùå`);
              setSearchMessage("Ï£ºÏ∞®Í≥µÍ∞ÑÏù¥ Î™®Îëê ÏÇ¨Ïö©Ï§ëÏûÖÎãàÎã§.");
            }
          } else {
            console.error(`‚ùå API Ïã§Ìå®:`, response.error);
            setSearchMessage(`ESP32-CAM API Ïò§Î•ò: ${response.error || 'Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.'}`);
          }
        } catch (error) {
          console.error('üí• API Ìò∏Ï∂ú Ïã§Ìå®:', error);
          setSearchMessage("ESP32-CAM API Ìò∏Ï∂ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. API ÏÑúÎ≤ÑÍ∞Ä Ïã§Ìñâ Ï§ëÏù∏ÏßÄ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.");
        } finally {
          setIsSearching(false);
        }
      }

      // üî• ÏµúÏ¢Ö Í≤ÄÏÇ¨ - foundÍ∞Ä falseÏù∏ Í≤ΩÏö∞ÏóêÎßå Ïò§Î•ò Î©îÏãúÏßÄ
      console.log(`üèÅ ÏµúÏ¢Ö Í≤ÄÏÇ¨: found = ${found}, query = "${query}"`);
      if (!found && query.trim()) {
        console.log(`‚ùå ÏµúÏ¢ÖÏ†ÅÏúºÎ°ú Ï∞®ÎüâÏùÑ Ï∞æÏßÄ Î™ªÌï®`);
        setSearchResult(null);
        setHighlightedVehicleId(null);
        setSearchMessage(`'${query}' Ï∞®ÎüâÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.`);
        setNavigationPath(null);
      } else if (found) {
        console.log(`‚úÖ Ï∞®Îüâ Í≤ÄÏÉâ ÏÑ±Í≥µ!`);
      }
    },
    [selectedLotId, handleLotChange, vehicles, parkingLots]
  );

  const handleSpaceClick = useCallback((space: ParkingSpace) => {
    if (space.vehicleId) {
      const vehicle = vehicles.find((v) => v.id === space.vehicleId)!;
      setSearchResult({ vehicle, space });
      setHighlightedVehicleId(vehicle.id);
      setNavigationPath(null);
    }
  }, [vehicles]);

  const handleViewCamera = useCallback(
    (imageUrl: string) => {
      if (searchResult) {
        setCameraVehiclePlate(searchResult.vehicle.licensePlate);
      }
      setCameraModalUrl(imageUrl);
    },
    [searchResult]
  );

  const handleNavigate = useCallback(() => {
    setShowEntranceModal(true);
  }, []);

  const handleSelectEntrance = useCallback(
    (entrance: BuildingEntrance) => {
      if (searchResult && selectedFloor) {
        const targetSpace = searchResult.space;
        const targetPosition = {
          x: targetSpace.position.x + targetSpace.size.width / 2,
          y: targetSpace.position.y + targetSpace.size.height / 2,
        };

        const path = calculatePath(entrance.position, targetPosition);
        setNavigationPath(path);
        setAnimationProgress(0);
      }
      setShowEntranceModal(false);
    },
    [searchResult, selectedFloor]
  );

  // Ïã§ÏãúÍ∞Ñ Îç∞Ïù¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏ Ìï∏Îì§Îü¨
  const handleDataUpdate = useCallback((newVehicles: Vehicle[]) => {
    setVehicles(prev => [...prev, ...newVehicles]);
  }, []);

  // Ïã§ÏãúÍ∞Ñ ÏóÖÎç∞Ïù¥Ìä∏ ÌÜ†Í∏Ä
  const toggleRealTimeUpdate = useCallback(() => {
    setRealTimeActive(prev => !prev);
  }, []);

  if (!selectedFloor) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100">
        <div className="text-center">
          <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-xl font-semibold text-gray-700">Ï£ºÏ∞®Ïû• Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50">
      {cameraModalUrl && (
        <CameraModal
          imageUrl={cameraModalUrl}
          vehiclePlate={cameraVehiclePlate}
          onClose={() => setCameraModalUrl(null)}
        />
      )}

      {showEntranceModal && selectedFloor && (
        <EntranceSelectionModal
          entrances={selectedFloor.mapData.entrances}
          onSelectEntrance={handleSelectEntrance}
          onClose={() => setShowEntranceModal(false)}
        />
      )}

      <header className="bg-white/80 backdrop-blur-lg sticky top-0 z-30 border-b border-white/20">
        <div className="max-w-screen-2xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16 sm:h-20">
            <div className="flex items-center gap-3 sm:gap-4">
              <div className="p-2 sm:p-3 bg-gradient-to-r from-blue-600 to-purple-700 rounded-xl">
                <ParkingCircle className="h-6 w-6 sm:h-8 sm:w-8 text-white" />
              </div>
              <div>
                <h1 className="text-lg sm:text-2xl font-bold bg-gradient-to-r from-blue-600 to-purple-700 bg-clip-text text-transparent">
                  AI Ïä§ÎßàÌä∏ Ï£ºÏ∞® Í¥ÄÏ†ú ÏãúÏä§ÌÖú
                </h1>
                <p className="text-xs sm:text-sm text-gray-600 font-medium hidden sm:block">
                  ESP32-CAM Í∏∞Î∞ò Ïã§ÏãúÍ∞Ñ Ï£ºÏ∞® Í¥ÄÎ¶¨
                </p>
              </div>
            </div>
            <div className="flex items-center gap-2 sm:gap-4">
              <div className="hidden sm:flex items-center text-sm text-gray-600 bg-white/50 px-4 py-2 rounded-xl">
                <Clock className="w-4 h-4 mr-2" />
                {new Date().toLocaleString("ko-KR", { timeZone: "Asia/Seoul" })}
              </div>
              <div className="flex items-center gap-2 bg-green-100 text-green-800 px-2 sm:px-3 py-1 sm:py-2 rounded-xl">
                <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                <span className="text-xs sm:text-sm font-medium">ÏãúÏä§ÌÖú Ï†ïÏÉÅ</span>
              </div>
              <button onClick={() => setSidebarOpen(!sidebarOpen)} className="lg:hidden p-2 text-gray-600">
                <Menu className="w-6 h-6" />
              </button>
            </div>
          </div>
        </div>
      </header>

      <main className="max-w-screen-2xl mx-auto px-4 sm:px-6 lg:px-8 py-4 sm:py-8">
        {/* ÌÜµÍ≥Ñ Ïπ¥Îìú */}
        <div className="grid grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-6 mb-6 sm:mb-8">
          <StatsCard
            icon={Building}
            title="ÏÑ†ÌÉùÎêú Ï£ºÏ∞®Ïû•"
            value={selectedLot.name}
            description="ÌòÑÏû¨ Î™®ÎãàÌÑ∞ÎßÅ Ï§ëÏù∏ Ï£ºÏ∞®Ïû•"
            gradient="from-blue-500 to-blue-700"
          />
          <StatsCard
            icon={Layers}
            title="Ï¥ù Ï£ºÏ∞®Î©¥"
            value={lotStats.totalSpots}
            description={`Ï¥ù ${lotStats.floorCount}Í∞ú Ï∏µ Ïö¥ÏòÅ`}
            gradient="from-purple-500 to-purple-700"
          />
          <StatsCard
            icon={Users}
            title="Ï£ºÏ∞®Ï§ë"
            value={lotStats.occupiedSpots}
            description={`Ïù¥Ïö©Î•† ${Math.round((lotStats.occupiedSpots / lotStats.totalSpots) * 100) || 0}%`}
            gradient="from-red-500 to-red-700"
          />
          <StatsCard
            icon={Car}
            title="Ï£ºÏ∞® Í∞ÄÎä•"
            value={lotStats.totalSpots - lotStats.occupiedSpots}
            description="ÌòÑÏû¨ Ïù¥Ïö© Í∞ÄÎä•Ìïú Ï£ºÏ∞®Î©¥"
            gradient="from-green-500 to-green-700"
          />
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6 sm:gap-8">
          {/* ÏÇ¨Ïù¥ÎìúÎ∞î */}
          <aside className={`lg:col-span-1 space-y-4 sm:space-y-6 ${sidebarOpen ? "block" : "hidden lg:block"}`}>
            <ParkingLotSelector lots={parkingLots} selectedLotId={selectedLotId} onLotChange={handleLotChange} />
            <FloorSelector
              floors={selectedLot.floors}
              selectedFloorId={selectedFloorId}
              onFloorChange={setSelectedFloorId}
            />
            <SearchBar onSearch={handleSearch} placeholder="Ï∞®ÎüâÎ≤àÌò∏ ÏûÖÎ†• (Î™®Îì† Î≤àÌò∏ Í≤ÄÏÉâ Í∞ÄÎä•)" />

            {searchResult ? (
              <VehicleInfo
                vehicle={searchResult.vehicle}
                space={searchResult.space}
                onViewCamera={handleViewCamera}
                onNavigate={handleNavigate}
              />
            ) : (
              searchMessage && (
                <div className={`border-l-4 p-4 sm:p-6 rounded-2xl ${
                  isSearching 
                    ? 'bg-gradient-to-r from-blue-50 to-indigo-50 border-blue-400 text-blue-800'
                    : searchMessage.includes('Ïò§Î•ò') || searchMessage.includes('Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§')
                    ? 'bg-gradient-to-r from-red-50 to-pink-50 border-red-400 text-red-800'
                    : 'bg-gradient-to-r from-yellow-50 to-orange-50 border-yellow-400 text-yellow-800'
                }`}>
                  <div className="flex items-center gap-3">
                    {isSearching ? (
                      <RefreshCw className="w-5 h-5 sm:w-6 sm:h-6 text-blue-600 animate-spin" />
                    ) : searchMessage.includes('Ïò§Î•ò') || searchMessage.includes('Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§') ? (
                      <X className="w-5 h-5 sm:w-6 sm:h-6 text-red-600" />
                    ) : (
                      <Search className="w-5 h-5 sm:w-6 sm:h-6 text-yellow-600" />
                    )}
                    <div>
                      <p className="font-bold text-base sm:text-lg">
                        {isSearching ? 'API Í≤ÄÏÉâ Ï§ë...' : 'Í≤ÄÏÉâ Í≤∞Í≥º'}
                      </p>
                      <p className="mt-1 text-sm sm:text-base">{searchMessage}</p>
                    </div>
                  </div>
                </div>
              )
            )}

            {/* Ïã§ÏãúÍ∞Ñ ÏóÖÎç∞Ïù¥Ìä∏ Ïª¥Ìè¨ÎÑåÌä∏ */}
            <RealTimeUpdate
              onDataUpdate={handleDataUpdate}
              isActive={realTimeActive}
            />

            {/* Ïã§ÏãúÍ∞Ñ ÏóÖÎç∞Ïù¥Ìä∏ ÌÜ†Í∏Ä Î≤ÑÌäº */}
            <div className="bg-white rounded-2xl p-4 sm:p-6 border border-gray-200">
              <button
                onClick={toggleRealTimeUpdate}
                className={`w-full py-3 px-4 font-semibold rounded-xl flex items-center justify-center gap-2 text-sm sm:text-base transition-colors ${
                  realTimeActive
                    ? 'bg-gradient-to-r from-green-500 to-emerald-600 text-white'
                    : 'bg-gradient-to-r from-gray-500 to-gray-600 text-white'
                }`}
              >
                <RefreshCw className={`w-4 h-4 sm:w-5 sm:h-5 ${realTimeActive ? 'animate-spin' : ''}`} />
                {realTimeActive ? 'Ïã§ÏãúÍ∞Ñ ÏóÖÎç∞Ïù¥Ìä∏ Ï§ëÏßÄ' : 'Ïã§ÏãúÍ∞Ñ ÏóÖÎç∞Ïù¥Ìä∏ ÏãúÏûë'}
              </button>
            </div>
          </aside>

          {/* Î©îÏù∏ ÏßÄÎèÑ */}
          <section className="lg:col-span-3">
            <ParkingMap
              floor={selectedFloor}
              vehicles={vehicles}
              highlightedVehicleId={highlightedVehicleId}
              onSpaceClick={handleSpaceClick}
              navigationPath={navigationPath}
              animationProgress={animationProgress}
            />
          </section>
        </div>
      </main>

      <style jsx>{`
        @keyframes fadeIn {
          from {
            opacity: 0;
            transform: translateY(20px);
          }
          to {
            opacity: 1;
            transform: translateY(0);
          }
        }

        @keyframes pulse {
          0%,
          100% {
            opacity: 1;
          }
          50% {
            opacity: 0.5;
          }
        }

        .animate-fadeIn {
          animation: fadeIn 0.5s ease-out;
        }
      `}</style>
    </div>
  );
}
